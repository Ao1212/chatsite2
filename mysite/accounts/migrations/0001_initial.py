# Generated by Django 2.2.4 on 2020-09-29 15:01

import accounts.models
import django.contrib.auth.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('user_id', models.AutoField(primary_key=True, serialize=False, verbose_name='user_id')),
                ('username', models.CharField(max_length=20, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='ユーザー名')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email')),
                ('is_staff', models.BooleanField(default=False, help_text='ユーザーが管理サイトにログイン可能かどうかを示します。', verbose_name='スタッフ権限')),
                ('is_active', models.BooleanField(default=True, help_text='ユーザーがアクティブかどうかを示します。アカウントを削除する代わりに選択を解除してください。', verbose_name='有効')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'ユーザー',
                'verbose_name_plural': 'ユーザー',
                'db_table': 'user',
            },
            managers=[
                ('objects', accounts.models.UserManager()),
            ],
        ),
    ]
